on load:
#    set {skript::lastLoader} to player
#    set {skript::lastFile} to name of script
#    set {skript::lastPath} to path of script
#    send "" to all players
#    send "<##FFFF55>&lM<##FFFF6A>&lU<##FFFF80>&lT<##FFFF95>&lL<##FFFFAA>&lI<##FFFFBF>&lF<##FFFFD5>&lA<##FFFFEA>&lR<##FFFFFF>&lM<##FFFFFF>&lE<##FFFFFF>&lR &7Reloaded &e/MultiFarmer/joueur/level&f.sk&7!" to all players
#    send "" to all players

on xp spawn:
    cancel event

command /level [<player>]:
    trigger:
        if arg-1 is set:
            set {_player} to arg-1
        else:
            set {_player} to player
        
        set {_level} to levelDisplay({_player})
        set {_line} to xpLine({_player}, 2)
        send "" to player
        send "&b&lLEVEL &7(%{_player}%)" to player
        send "&3&l» &r&fLevel: &3%{_level}%" to player
        send "&3&l» &r&fXP: &3%{level::playerExp::%uuid of {_player}%}%&7/&3%{level::xptolevel::%uuid of {_player}%}%" to player
        send "&3&l»%{_line}%" to player
        send "" to player

command /setlevel <number>:
    permission: op
    trigger:
        set {level::playerLevel::%uuid of player%} to arg-1

command /resettoken [<player>]:
    permission: op
    trigger:
        if arg-1 is set:
            set {_player} to arg-1
        else:
            set {_player} to player
        set {playerToken::%uuid of player%} to 0

command /resetlevel [<player>]:
    permission: op
    trigger:
        if arg-1 is set:
            set {_player} to arg-1
        else:
            set {_player} to player
        set {level::playerLevel::%uuid of {_player}%} to 0
        set {level::playerExp::%uuid of {_player}%} to 0
        set {level::xptolevel::%uuid of player%} to 50


on join:
    if {level::playerLevel::%uuid of player%} is not set:
        set {level::playerLevel::%uuid of player%} to 0
    if {level::xptolevel::%uuid of player%} is not set:
        set {level::xptolevel::%uuid of player%} to 50
    if {level::playerExp::%uuid of player%} is not set:
        set {level::playerExp::%uuid of player%} to 0


function levelup(p: player, b: item):

    if {level::playerExp::%uuid of {_p}%} >= {level::xptolevel::%uuid of {_p}%}:
        set {level::playerExp::%uuid of {_p}%} to {level::xptolevel::%uuid of {_p}%}
    else if {level::playerExp::%uuid of {_p}%} = {level::xptolevel::%uuid of {_p}%}:
        stop
    else:
        if {_b} is stone1():
            add (1 * rankSetXP({_p})) to {level::playerExp::%uuid of {_p}%}
    
    if {level::playerLevel::%uuid of {_p}%} = 100:
        stop

    if {level::playerExp::%uuid of {_p}%} = {level::xptolevel::%uuid of {_p}%}:
        add 1 to {level::playerLevel::%uuid of {_p}%}
        set {level::playerExp::%uuid of {_p}%} to 0
        levelSetXP({_p})
        play sound "entity.experience_orb.pickup" to {_p}


function levelSetXP(p: player):
    if {level::xptolevel::%uuid of {_p}%} >= 1000000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.000244140625)
    else if {level::xptolevel::%uuid of {_p}%} >= 100000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.00048828125)
    else if {level::xptolevel::%uuid of {_p}%} >= 10000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.0009765625)
    else if {level::xptolevel::%uuid of {_p}%} >= 1000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.001953125)
    else if {level::xptolevel::%uuid of {_p}%} >= 100000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.00390625)
    else if {level::xptolevel::%uuid of {_p}%} >= 10000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.0078125)
    else if {level::xptolevel::%uuid of {_p}%} >= 1000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.015625)
    else if {level::xptolevel::%uuid of {_p}%} >= 100000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.03125)
    else if {level::xptolevel::%uuid of {_p}%} >= 10000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.0625)
    else if {level::xptolevel::%uuid of {_p}%} >= 1000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.125)
    else if {level::xptolevel::%uuid of {_p}%} <= 999:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.25)

function rankSetXP(p: player) :: number:
    set {_group} to group of {_p}
    if {_group} is "default":
        set {_FinalRankAmount} to 1
    else if {_group} is "ultimate":
        set {_FinalRankAmount} to 1.5
    else if {_group} is "champion":
        set {_FinalRankAmount} to 2
    else if {_group} is "royal":
        set {_FinalRankAmount} to 3
    else if {_group} is "guardian":
        set {_FinalRankAmount} to 4
    else if {_group} is "angel":
        set {_FinalRankAmount} to 5
    return {_FinalRankAmount}

function xpLine(p: player, i: number) :: text:
    
    if {_i} = 1:
        set {_code} to "&7"
    if {_i} = 2:
        set {_code} to "&b"
    set {_progress} to (({level::playerExp::%uuid of {_p}%} / {level::xptolevel::%uuid of {_p}%}) * 100)
    if {_progress} <= 4:
        set {_line} to "&8[&8&m                    &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 5:
        set {_line} to "&8[&a&m &m&8&m                   &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 10:
        set {_line} to "&8[&a&m  &m&8&m                  &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 15:
        set {_line} to "&8[&a&m   &m&8&m                 &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 20:
        set {_line} to "&8[&a&m    &m&8&m                &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 25:
        set {_line} to "&8[&a&m     &m&8&m               &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 30:
        set {_line} to "&8[&a&m      &m&8&m              &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 35:
        set {_line} to "&8[&a&m       &m&8&m             &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 40:
        set {_line} to "&8[&a&m        &m&8&m            &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 45:
        set {_line} to "&8[&a&m         &m&8&m           &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 50:
        set {_line} to "&8[&a&m          &m&8&m          &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 55:
        set {_line} to "&8[&a&m           &m&8&m         &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 60:
        set {_line} to "&8[&a&m            &m&8&m        &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 65:
        set {_line} to "&8[&a&m             &m&8&m       &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 70:
        set {_line} to "&8[&a&m              &m&8&m      &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 75:
        set {_line} to "&8[&a&m               &m&8&m     &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 80:
        set {_line} to "&8[&a&m                &m&8&m    &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 85:
        set {_line} to "&8[&a&m                 &m&8&m   &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 90:
        set {_line} to "&8[&a&m                  &m&8&m  &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 95:
        set {_line} to "&8[&a&m                   &m&8&m &8] %{_code}%(%{_progress}%%%)"
    if {_progress} >= 100:
        set {_line} to "&8[&a&m                    &8] %{_code}%(%{_progress}%%%)"
    return {_line}



function levelDisplay(p: player) :: text:
    
    set {_level} to {level::playerLevel::%uuid of {_p}%}
    if {_level} <= 9:
        set {_display} to "&b%{_level}%＊"
    else if {_level} <= 19:
        set {_display} to "&b%{_level}%⁑"
    else if {_level} <= 29:
        set {_display} to "&b%{_level}%⁂"
    else if {_level} <= 39:
        set {_display} to "&b%{_level}%✦"
    else if {_level} <= 49:
        set {_display} to "&b%{_level}%⭐"
    else if {_level} <= 74:
        set {_display} to "&b%{_level}%✶"
    else if {_level} <= 99:
        set {_display} to "&b%{_level}%✸"
    else if {_level} = 100:
        set {_display} to "&b&l&kI&r&b✵%{_level}%✵&b&l&kI"
    return {_display}