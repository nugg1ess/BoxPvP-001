on load:
#    set {skript::lastLoader} to player
#    set {skript::lastFile} to name of script
#    set {skript::lastPath} to path of script
    send "" to all players
    send "<##FFFF55>&lM<##FFFF6A>&lU<##FFFF80>&lT<##FFFF95>&lL<##FFFFAA>&lI<##FFFFBF>&lF<##FFFFD5>&lA<##FFFFEA>&lR<##FFFFFF>&lM<##FFFFFF>&lE<##FFFFFF>&lR &7Reloaded &e/MultiFarmer/joueur/level&f.sk&7!" to all players
    send "" to all players

on xp spawn:
    cancel event

command /level:
  trigger:
    send "&eYour current level is &6%{level::playerLevel::%uuid of player%}%&e and you have &6%{level::playerExp::%uuid of player%}%&e experience points."

command /resettoken [<player>]:
    permission: op
    trigger:
        if arg-1 is set:
            set {_player} to arg-1
        else:
            set {_player} to player
        set {season1PlayerToken::%uuid of player%} to 0

command /resetlevel [<player>]:
    permission: op
    trigger:
        if arg-1 is set:
            set {_player} to arg-1
        else:
            set {_player} to player
        set {level::playerLevel::%uuid of {_player}%} to 0
        set {level::playerExp::%uuid of {_player}%} to 0
        set {level::xptolevel::%uuid of player%} to 50


on join:
    if {level::xptolevel::%uuid of player%} is not set:
        set {level::xptolevel::%uuid of player%} to 50
    if {level::playerExp::%uuid of player%} is not set:
        set {level::playerExp::%uuid of player%} to 0

function levelup(p: player, b: block, xpb: int):

    if {_b} is stone:
        add (1 * {_xpb}) to {level::playerExp::%uuid of {_p}%}
    if {_b} is iron ore:
        add (2 * {_xpb}) to {level::playerExp::%uuid of {_p}%}
    if {_b} is diamond ore:
        add (4 * {_xpb}) to {level::playerExp::%uuid of {_p}%}
    if {_b} is emerald ore:
        add (6 * {_xpb}) to {level::playerExp::%uuid of {_p}%}
    
    if {level::playerLevel::%uuid of {_p}%} = 100:
        stop

    if {level::playerExp::%uuid of {_p}%} >= {level::xptolevel::%uuid of {_p}%}:
        add floor(10 * ({level::playerLevel::%uuid of {_p}%} + 1) * 1.5) to {season1PlayerToken::%uuid of {_p}%}
        add 1 to {level::playerLevel::%uuid of {_p}%}
        set {level::playerExp::%uuid of {_p}%} to 0
        levelSetXP({_p})
        play sound "item.bottle.fill_dragonbreath" to {_p}

function levelSetXP(p: player):
    if {level::xptolevel::%uuid of {_p}%} >= 1000000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.000244140625)
    else if {level::xptolevel::%uuid of {_p}%} >= 100000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.00048828125)
    else if {level::xptolevel::%uuid of {_p}%} >= 10000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.0009765625)
    else if {level::xptolevel::%uuid of {_p}%} >= 1000000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.001953125)
    else if {level::xptolevel::%uuid of {_p}%} >= 100000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.00390625)
    else if {level::xptolevel::%uuid of {_p}%} >= 10000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.0078125)
    else if {level::xptolevel::%uuid of {_p}%} >= 1000000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.015625)
    else if {level::xptolevel::%uuid of {_p}%} >= 100000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.03125)
    else if {level::xptolevel::%uuid of {_p}%} >= 10000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.0625)
    else if {level::xptolevel::%uuid of {_p}%} >= 1000:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.125)
    else if {level::xptolevel::%uuid of {_p}%} <= 999:
        set {level::xptolevel::%uuid of {_p}%} to floor({level::xptolevel::%uuid of {_p}%} * 1.25)

function rankSetXP(p: player) :: number:
    set {_group} to group of {_p}
    if {_group} is "default":
        set {_FinalRankAmount} to 1
    else if {_group} is "ultimate":
        set {_FinalRankAmount} to 1.5
    else if {_group} is "champion":
        set {_FinalRankAmount} to 2
    else if {_group} is "royal":
        set {_FinalRankAmount} to 3
    else if {_group} is "guardian":
        set {_FinalRankAmount} to 4
    else if {_group} is "angel":
        set {_FinalRankAmount} to 5
    return {_FinalRankAmount}